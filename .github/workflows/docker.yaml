name: Docker

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        type: string

permissions:
  contents: 'read'
  id-token: 'write'
  packages: 'write'
  security-events: write

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/mondoo-assessment-app
  APP_REPOSITORY: ${{ github.repository_owner }}/mondoo-assessment-app

jobs:
  build-and-push:
    name: Build docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Download mondoo-assessment-app relaseses
        run: |
          gh release download v${{ inputs.tag }} -R $APP_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: Check cosign install!
        run: cosign version
      
      - name: Login to github container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ inputs.tag }}
            type=raw,value=latest

      - name: Build and push
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          platforms: "linux/amd64,linux/arm64"
          build-args: TAG=${{ inputs.tag }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Pull docker image
        run: docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ inputs.tag }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}:${{ inputs.tag }}'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Sign the published Docker image
        env:
          DIGEST: ${{ steps.build-push.outputs.digest }}
          TAGS: ${{ steps.docker_meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}

      - name: Trigger helm chart test workflow
        run: gh workflow run -f tag=${{ inputs.tag }} Deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
